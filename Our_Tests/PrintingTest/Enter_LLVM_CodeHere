@.intFormat = internal constant [4 x i8] c"%d\0A\00"
declare i32 @printf(i8*, ...)

define i32 @fn_fib(i32, i32) {
    %allocation_label_0.leftOperand = alloca i1
    store i1 0, i1* %allocation_label_0.leftOperand
    %allocation_label_0.rightOperand = alloca i1
    store i1 0, i1* %allocation_label_0.rightOperand
    %t2 = add i32 %0, 0
    %t3 = trunc i32 %t2 to i1
    store i1 %t3, i1* %allocation_label_0.leftOperand
    %ptr2 = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
    %3 = call i32 (i8*, ...) @printf(i8* %ptr2, i32 100)
    br i1 %t3, label %label_0.resultSection, label %label_0.rightEvaluationSection

label_0.rightEvaluationSection:
    %ptr3 = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
    %4 = call i32 (i8*, ...) @printf(i8* %ptr2, i32 200)
    %t4 = add i32 %1, 0
    %t5 = trunc i32 %t4 to i1
    store i1 %t5, i1* %allocation_label_0.rightOperand
    br label %label_0.resultSection

label_0.resultSection:
    %ptr4 = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
    %5 = call i32 (i8*, ...) @printf(i8* %ptr2, i32 300)
    %t6 = load i1, i1* %allocation_label_0.leftOperand
    %t7 = load i1, i1* %allocation_label_0.rightOperand
    %t1 = or i1 %t6, %t7
    %t8 = zext i1 %t1 to i32
    %t0 = add i32 %t8, 0
    ret i32 %t0
}

define i32 @main() {
    %fib_number = call i32 @fn_fib(i32 0, i32 1)
    %ptr1 = getelementptr [4 x i8], [4 x i8]* @.intFormat, i32 0, i32 0
    %1 = call i32 (i8*, ...) @printf(i8* %ptr1, i32 %fib_number)
    ret i32 0
}